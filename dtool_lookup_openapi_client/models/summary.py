# coding: utf-8

"""
    dtool-lookup-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from dtool_lookup_openapi_client.configuration import Configuration


class Summary(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number_of_datasets': 'int',
        'creator_usernames': 'list[str]',
        'tags': 'list[str]',
        'datasets_per_tag': 'dict(str, int)',
        'datasets_per_creator': 'dict(str, int)',
        'base_uris': 'list[str]',
        'datasets_per_base_uri': 'dict(str, int)'
    }

    attribute_map = {
        'number_of_datasets': 'number_of_datasets',
        'creator_usernames': 'creator_usernames',
        'tags': 'tags',
        'datasets_per_tag': 'datasets_per_tag',
        'datasets_per_creator': 'datasets_per_creator',
        'base_uris': 'base_uris',
        'datasets_per_base_uri': 'datasets_per_base_uri'
    }

    def __init__(self, number_of_datasets=None, creator_usernames=None, tags=None, datasets_per_tag=None, datasets_per_creator=None, base_uris=None, datasets_per_base_uri=None, local_vars_configuration=None):  # noqa: E501
        """Summary - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._number_of_datasets = None
        self._creator_usernames = None
        self._tags = None
        self._datasets_per_tag = None
        self._datasets_per_creator = None
        self._base_uris = None
        self._datasets_per_base_uri = None
        self.discriminator = None

        if number_of_datasets is not None:
            self.number_of_datasets = number_of_datasets
        if creator_usernames is not None:
            self.creator_usernames = creator_usernames
        if tags is not None:
            self.tags = tags
        if datasets_per_tag is not None:
            self.datasets_per_tag = datasets_per_tag
        if datasets_per_creator is not None:
            self.datasets_per_creator = datasets_per_creator
        if base_uris is not None:
            self.base_uris = base_uris
        if datasets_per_base_uri is not None:
            self.datasets_per_base_uri = datasets_per_base_uri

    @property
    def number_of_datasets(self):
        """Gets the number_of_datasets of this Summary.  # noqa: E501


        :return: The number_of_datasets of this Summary.  # noqa: E501
        :rtype: int
        """
        return self._number_of_datasets

    @number_of_datasets.setter
    def number_of_datasets(self, number_of_datasets):
        """Sets the number_of_datasets of this Summary.


        :param number_of_datasets: The number_of_datasets of this Summary.  # noqa: E501
        :type number_of_datasets: int
        """

        self._number_of_datasets = number_of_datasets

    @property
    def creator_usernames(self):
        """Gets the creator_usernames of this Summary.  # noqa: E501


        :return: The creator_usernames of this Summary.  # noqa: E501
        :rtype: list[str]
        """
        return self._creator_usernames

    @creator_usernames.setter
    def creator_usernames(self, creator_usernames):
        """Sets the creator_usernames of this Summary.


        :param creator_usernames: The creator_usernames of this Summary.  # noqa: E501
        :type creator_usernames: list[str]
        """

        self._creator_usernames = creator_usernames

    @property
    def tags(self):
        """Gets the tags of this Summary.  # noqa: E501


        :return: The tags of this Summary.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Summary.


        :param tags: The tags of this Summary.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def datasets_per_tag(self):
        """Gets the datasets_per_tag of this Summary.  # noqa: E501


        :return: The datasets_per_tag of this Summary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._datasets_per_tag

    @datasets_per_tag.setter
    def datasets_per_tag(self, datasets_per_tag):
        """Sets the datasets_per_tag of this Summary.


        :param datasets_per_tag: The datasets_per_tag of this Summary.  # noqa: E501
        :type datasets_per_tag: dict(str, int)
        """

        self._datasets_per_tag = datasets_per_tag

    @property
    def datasets_per_creator(self):
        """Gets the datasets_per_creator of this Summary.  # noqa: E501


        :return: The datasets_per_creator of this Summary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._datasets_per_creator

    @datasets_per_creator.setter
    def datasets_per_creator(self, datasets_per_creator):
        """Sets the datasets_per_creator of this Summary.


        :param datasets_per_creator: The datasets_per_creator of this Summary.  # noqa: E501
        :type datasets_per_creator: dict(str, int)
        """

        self._datasets_per_creator = datasets_per_creator

    @property
    def base_uris(self):
        """Gets the base_uris of this Summary.  # noqa: E501


        :return: The base_uris of this Summary.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_uris

    @base_uris.setter
    def base_uris(self, base_uris):
        """Sets the base_uris of this Summary.


        :param base_uris: The base_uris of this Summary.  # noqa: E501
        :type base_uris: list[str]
        """

        self._base_uris = base_uris

    @property
    def datasets_per_base_uri(self):
        """Gets the datasets_per_base_uri of this Summary.  # noqa: E501


        :return: The datasets_per_base_uri of this Summary.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._datasets_per_base_uri

    @datasets_per_base_uri.setter
    def datasets_per_base_uri(self, datasets_per_base_uri):
        """Sets the datasets_per_base_uri of this Summary.


        :param datasets_per_base_uri: The datasets_per_base_uri of this Summary.  # noqa: E501
        :type datasets_per_base_uri: dict(str, int)
        """

        self._datasets_per_base_uri = datasets_per_base_uri

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Summary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Summary):
            return True

        return self.to_dict() != other.to_dict()
