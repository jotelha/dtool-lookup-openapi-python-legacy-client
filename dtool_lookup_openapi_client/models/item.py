# coding: utf-8

"""
    dtool-lookup-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from dtool_lookup_openapi_client.configuration import Configuration


class Item(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'size_in_bytes': 'int',
        'relpath': 'str',
        'hash': 'str',
        'utc_timestamp': 'float'
    }

    attribute_map = {
        'size_in_bytes': 'size_in_bytes',
        'relpath': 'relpath',
        'hash': 'hash',
        'utc_timestamp': 'utc_timestamp'
    }

    def __init__(self, size_in_bytes=None, relpath=None, hash=None, utc_timestamp=None, local_vars_configuration=None):  # noqa: E501
        """Item - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._size_in_bytes = None
        self._relpath = None
        self._hash = None
        self._utc_timestamp = None
        self.discriminator = None

        if size_in_bytes is not None:
            self.size_in_bytes = size_in_bytes
        if relpath is not None:
            self.relpath = relpath
        if hash is not None:
            self.hash = hash
        if utc_timestamp is not None:
            self.utc_timestamp = utc_timestamp

    @property
    def size_in_bytes(self):
        """Gets the size_in_bytes of this Item.  # noqa: E501


        :return: The size_in_bytes of this Item.  # noqa: E501
        :rtype: int
        """
        return self._size_in_bytes

    @size_in_bytes.setter
    def size_in_bytes(self, size_in_bytes):
        """Sets the size_in_bytes of this Item.


        :param size_in_bytes: The size_in_bytes of this Item.  # noqa: E501
        :type size_in_bytes: int
        """

        self._size_in_bytes = size_in_bytes

    @property
    def relpath(self):
        """Gets the relpath of this Item.  # noqa: E501


        :return: The relpath of this Item.  # noqa: E501
        :rtype: str
        """
        return self._relpath

    @relpath.setter
    def relpath(self, relpath):
        """Sets the relpath of this Item.


        :param relpath: The relpath of this Item.  # noqa: E501
        :type relpath: str
        """

        self._relpath = relpath

    @property
    def hash(self):
        """Gets the hash of this Item.  # noqa: E501


        :return: The hash of this Item.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Item.


        :param hash: The hash of this Item.  # noqa: E501
        :type hash: str
        """

        self._hash = hash

    @property
    def utc_timestamp(self):
        """Gets the utc_timestamp of this Item.  # noqa: E501


        :return: The utc_timestamp of this Item.  # noqa: E501
        :rtype: float
        """
        return self._utc_timestamp

    @utc_timestamp.setter
    def utc_timestamp(self, utc_timestamp):
        """Sets the utc_timestamp of this Item.


        :param utc_timestamp: The utc_timestamp of this Item.  # noqa: E501
        :type utc_timestamp: float
        """

        self._utc_timestamp = utc_timestamp

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Item):
            return True

        return self.to_dict() != other.to_dict()
