# coding: utf-8

"""
    dtool-lookup-server API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from dtool_lookup_openapi_client.configuration import Configuration


class SearchDataset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uuids': 'list[str]',
        'creator_usernames': 'list[str]',
        'tags': 'list[str]',
        'free_text': 'str',
        'base_uris': 'list[str]'
    }

    attribute_map = {
        'uuids': 'uuids',
        'creator_usernames': 'creator_usernames',
        'tags': 'tags',
        'free_text': 'free_text',
        'base_uris': 'base_uris'
    }

    def __init__(self, uuids=None, creator_usernames=None, tags=None, free_text=None, base_uris=None, local_vars_configuration=None):  # noqa: E501
        """SearchDataset - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._uuids = None
        self._creator_usernames = None
        self._tags = None
        self._free_text = None
        self._base_uris = None
        self.discriminator = None

        if uuids is not None:
            self.uuids = uuids
        if creator_usernames is not None:
            self.creator_usernames = creator_usernames
        if tags is not None:
            self.tags = tags
        if free_text is not None:
            self.free_text = free_text
        if base_uris is not None:
            self.base_uris = base_uris

    @property
    def uuids(self):
        """Gets the uuids of this SearchDataset.  # noqa: E501


        :return: The uuids of this SearchDataset.  # noqa: E501
        :rtype: list[str]
        """
        return self._uuids

    @uuids.setter
    def uuids(self, uuids):
        """Sets the uuids of this SearchDataset.


        :param uuids: The uuids of this SearchDataset.  # noqa: E501
        :type uuids: list[str]
        """

        self._uuids = uuids

    @property
    def creator_usernames(self):
        """Gets the creator_usernames of this SearchDataset.  # noqa: E501


        :return: The creator_usernames of this SearchDataset.  # noqa: E501
        :rtype: list[str]
        """
        return self._creator_usernames

    @creator_usernames.setter
    def creator_usernames(self, creator_usernames):
        """Sets the creator_usernames of this SearchDataset.


        :param creator_usernames: The creator_usernames of this SearchDataset.  # noqa: E501
        :type creator_usernames: list[str]
        """

        self._creator_usernames = creator_usernames

    @property
    def tags(self):
        """Gets the tags of this SearchDataset.  # noqa: E501


        :return: The tags of this SearchDataset.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SearchDataset.


        :param tags: The tags of this SearchDataset.  # noqa: E501
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def free_text(self):
        """Gets the free_text of this SearchDataset.  # noqa: E501


        :return: The free_text of this SearchDataset.  # noqa: E501
        :rtype: str
        """
        return self._free_text

    @free_text.setter
    def free_text(self, free_text):
        """Sets the free_text of this SearchDataset.


        :param free_text: The free_text of this SearchDataset.  # noqa: E501
        :type free_text: str
        """

        self._free_text = free_text

    @property
    def base_uris(self):
        """Gets the base_uris of this SearchDataset.  # noqa: E501


        :return: The base_uris of this SearchDataset.  # noqa: E501
        :rtype: list[str]
        """
        return self._base_uris

    @base_uris.setter
    def base_uris(self, base_uris):
        """Sets the base_uris of this SearchDataset.


        :param base_uris: The base_uris of this SearchDataset.  # noqa: E501
        :type base_uris: list[str]
        """

        self._base_uris = base_uris

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchDataset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchDataset):
            return True

        return self.to_dict() != other.to_dict()
